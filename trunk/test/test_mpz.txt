MPZ Functionality
=================

    >>> import gmpy2 as G
    >>> from gmpy2 import mpz, mpq, mpfr
    >>> a = mpz(123)
    >>> b = mpz(456)

Test gmpy2.remove
-----------------

gmpy2.remove factors out multiple copies of a factor from a larger integer.
The factor must be greater than or equal to 2.

    >>> G.remove(a,2)
    (mpz(123), 0)
    >>> G.remove(a,3)
    (mpz(41), 1)
    >>> G.remove(b,2)
    (mpz(57), 3)
    >>> G.remove(b,3)
    (mpz(152), 1)
    >>> G.remove(b,1)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: factor must be > 1
    >>> G.remove(b,0)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: factor must be > 1
    >>> G.remove(b,789)
    (mpz(456), 0)
    >>> G.remove(b,-3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: factor must be > 1
    >>> G.remove(b,float('NaN'))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: remove() requires 'mpz','mpz' arguments


Test mpz.__index__
------------------

    >>> range(333)[a]
    123
    >>> range(333)[b]
    Traceback (innermost last):
      ...
    IndexError: range object index out of range

Test elementary operations
--------------------------

    >>> a+b
    mpz(579)
    >>> b+a
    mpz(579)
    >>> a+'b'
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: unsupported operand type(s) for +: 'mpz' and 'str'
    >>> 'b'+a
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: Can't convert 'mpz' object to str implicitly

    >>> a-b
    mpz(-333)
    >>> b-a
    mpz(333)
    >>> a-'b'
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: unsupported operand type(s) for -: 'mpz' and 'str'
    >>> 'b'-a
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: unsupported operand type(s) for -: 'str' and 'mpz'

    >>> a//b
    mpz(0)
    >>> a/b
    mpfr('0.26973684210526316')
    >>> b//a
    mpz(3)
    >>> b/a
    mpfr('3.7073170731707319')
    >>> a*b
    mpz(56088)
    >>> b*a
    mpz(56088)

    >>> a*b
    mpz(56088)
    >>> b*a
    mpz(56088)
    >>> a*'b'
    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'
    >>> 'b'*a
    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'

    >>> a//b
    mpz(0)
    >>> b//a
    mpz(3)
    >>> a/b
    mpfr('0.26973684210526316')
    >>> b/a
    mpfr('3.7073170731707319')
    >>> a//0
    Traceback (most recent call last):
      ...
    ZeroDivisionError: division or modulo by zero
    >>> a/0
    Traceback (most recent call last):
      ...
    ZeroDivisionError: division or modulo by zero
    >>> a%b
    mpz(123)
    >>> b%a
    mpz(87)
    >>> divmod(a,b)
    (mpz(0), mpz(123))
    >>> divmod(b,a)
    (mpz(3), mpz(87))
    >>> divmod(a,0)
    Traceback (most recent call last):
      ...
    ZeroDivisionError: division or modulo by zero

    >>> a+1
    mpz(124)
    >>> a+(-1)
    mpz(122)
    >>> (-1)+a
    mpz(122)
    >>> 1+a
    mpz(124)
    >>> a-1
    mpz(122)
    >>> a-(-1)
    mpz(124)
    >>> 1-a
    mpz(-122)
    >>> (-1)-a
    mpz(-124)
    >>> a+True
    mpz(124)
    >>> a+False
    mpz(123)
    >>> a*False
    mpz(0)
    >>> a//True
    mpz(123)
    >>> abs(-a)==a
    True
    >>> pow(a,10)
    mpz(792594609605189126649)
    >>> pow(a,7,b)
    mpz(99)
    >>> G.sign(b-a)
    1
    >>> G.sign(b-b)
    0
    >>> G.sign(a-b)
    -1
    >>> G.sign(a)
    1
    >>> G.sign(-a)
    -1
    >>> z=b-b; G.sign(z)
    0

Test pickle
-----------

    >>> import pickle
    >>> pickle.loads(pickle.dumps(G.mpz(12346789)))
    mpz(12346789)
    >>> pickle.loads(pickle.dumps(G.mpz(-12346789)))
    mpz(-12346789)
    >>> pickle.loads(pickle.dumps(G.mpz(0)))
    mpz(0)

Test is_even and is_odd
-----------------------

    >>> G.is_even(a)
    False
    >>> G.is_odd(a)
    True
    >>> G.is_even(b)
    True
    >>> G.is_odd(b)
    False
    >>> a.is_odd()
    True
    >>> a.is_even()
    False
    >>> G.is_even(2)
    True

Test interactions with NaN/Inf
------------------------------
    >>> G.context().trap_divzero == False
    True
    >>> a == float('Inf')
    False
    >>> a != float('Inf')
    True
    >>> a > float('Inf')
    False
    >>> a >= float('Inf')
    False
    >>> a < float('Inf')
    True
    >>> a <= float('Inf')
    True
    >>> a == float('-Inf')
    False
    >>> a != float('-Inf')
    True
    >>> a > float('-Inf')
    True
    >>> a >= float('-Inf')
    True
    >>> a < float('-Inf')
    False
    >>> a <= float('-Inf')
    False
    >>> a == float('nan')
    False
    >>> a != float('nan')
    True
    >>> a > float('nan')
    False
    >>> a >= float('nan')
    False
    >>> a < float('nan')
    False
    >>> a <= float('nan')
    False
    >>> float('Inf') == a
    False
    >>> float('Inf') != a
    True
    >>> float('Inf') > a
    True
    >>> float('Inf') >= a
    True
    >>> float('Inf') < a
    False
    >>> float('Inf') <= a
    False
    >>> float('-Inf') == a
    False
    >>> float('-Inf') != a
    True
    >>> float('-Inf') > a
    False
    >>> float('-Inf') >= a
    False
    >>> float('-Inf') < a
    True
    >>> float('-Inf') <= a
    True
    >>> float('nan') == a
    False
    >>> float('nan') != a
    True
    >>> float('nan') > a
    False
    >>> float('nan') >= a
    False
    >>> float('nan') < a
    False
    >>> float('nan') <= a
    False


    >>> a == mpfr('Inf')
    False
    >>> a != mpfr('Inf')
    True
    >>> a > mpfr('Inf')
    False
    >>> a >= mpfr('Inf')
    False
    >>> a < mpfr('Inf')
    True
    >>> a <= mpfr('Inf')
    True
    >>> a == mpfr('-Inf')
    False
    >>> a != mpfr('-Inf')
    True
    >>> a > mpfr('-Inf')
    True
    >>> a >= mpfr('-Inf')
    True
    >>> a < mpfr('-Inf')
    False
    >>> a <= mpfr('-Inf')
    False
    >>> a == mpfr('nan')
    False
    >>> a != mpfr('nan')
    True
    >>> a > mpfr('nan')
    False
    >>> a >= mpfr('nan')
    False
    >>> a < mpfr('nan')
    False
    >>> a <= mpfr('nan')
    False
    >>> mpfr('Inf') == a
    False
    >>> mpfr('Inf') != a
    True
    >>> mpfr('Inf') > a
    True
    >>> mpfr('Inf') >= a
    True
    >>> mpfr('Inf') < a
    False
    >>> mpfr('Inf') <= a
    False
    >>> mpfr('-Inf') == a
    False
    >>> mpfr('-Inf') != a
    True
    >>> mpfr('-Inf') > a
    False
    >>> mpfr('-Inf') >= a
    False
    >>> mpfr('-Inf') < a
    True
    >>> mpfr('-Inf') <= a
    True
    >>> mpfr('nan') == a
    False
    >>> mpfr('nan') != a
    True
    >>> mpfr('nan') > a
    False
    >>> mpfr('nan') >= a
    False
    >>> mpfr('nan') < a
    False
    >>> mpfr('nan') <= a
    False

    >>> a + float('Inf')
    mpfr('inf')
    >>> float('Inf') + a
    mpfr('inf')
    >>> a + float('-Inf')
    mpfr('-inf')
    >>> float('-Inf') + a
    mpfr('-inf')
    >>> a + float('nan')
    mpfr('nan')
    >>> float('nan') + a
    mpfr('nan')
    >>> a - float('Inf')
    mpfr('-inf')
    >>> float('Inf') - a
    mpfr('inf')
    >>> a - float('-Inf')
    mpfr('inf')
    >>> float('-Inf') - a
    mpfr('-inf')
    >>> a - float('nan')
    mpfr('nan')
    >>> float('nan') - a
    mpfr('nan')
    >>> a * float('Inf')
    mpfr('inf')
    >>> float('Inf') * a
    mpfr('inf')
    >>> a * float('-Inf')
    mpfr('-inf')
    >>> float('-Inf') * a
    mpfr('-inf')
    >>> -a * float('Inf')
    mpfr('-inf')
    >>> float('Inf') * -a
    mpfr('-inf')
    >>> -a * float('-Inf')
    mpfr('inf')
    >>> float('-Inf') * -a
    mpfr('inf')
    >>> a * float('nan')
    mpfr('nan')
    >>> float('nan') * a
    mpfr('nan')
    >>> G.mpz(0) * float('Inf')
    mpfr('nan')
    >>> G.mpz(0) * float('-Inf')
    mpfr('nan')
    >>> float('Inf') * G.mpz(0)
    mpfr('nan')
    >>> float('-Inf') * G.mpz(0)
    mpfr('nan')
    >>> a / float('Inf')
    mpfr('0.0')
    >>> -a / float('Inf')
    mpfr('-0.0')
    >>> float('Inf') / a
    mpfr('inf')
    >>> float('Inf') / -a
    mpfr('-inf')
    >>> a / float('-Inf')
    mpfr('-0.0')
    >>> -a / float('-Inf')
    mpfr('0.0')
    >>> float('-Inf') / a
    mpfr('-inf')
    >>> float('-Inf') / -a
    mpfr('inf')
    >>> a / float('nan')
    mpfr('nan')
    >>> float('nan') / a
    mpfr('nan')
    >>> float('nan') / G.mpz(0)
    mpfr('nan')
    >>> float('nan') / G.mpz(0)
    mpfr('nan')

    >>> a + mpfr('Inf')
    mpfr('inf')
    >>> mpfr('Inf') + a
    mpfr('inf')
    >>> a + mpfr('-Inf')
    mpfr('-inf')
    >>> mpfr('-Inf') + a
    mpfr('-inf')
    >>> a + mpfr('nan')
    mpfr('nan')
    >>> mpfr('nan') + a
    mpfr('nan')
    >>> a - mpfr('Inf')
    mpfr('-inf')
    >>> mpfr('Inf') - a
    mpfr('inf')
    >>> a - mpfr('-Inf')
    mpfr('inf')
    >>> mpfr('-Inf') - a
    mpfr('-inf')
    >>> a - mpfr('nan')
    mpfr('nan')
    >>> mpfr('nan') - a
    mpfr('nan')
    >>> a * mpfr('Inf')
    mpfr('inf')
    >>> mpfr('Inf') * a
    mpfr('inf')
    >>> a * mpfr('-Inf')
    mpfr('-inf')
    >>> mpfr('-Inf') * a
    mpfr('-inf')
    >>> -a * mpfr('Inf')
    mpfr('-inf')
    >>> mpfr('Inf') * -a
    mpfr('-inf')
    >>> -a * mpfr('-Inf')
    mpfr('inf')
    >>> mpfr('-Inf') * -a
    mpfr('inf')
    >>> a * mpfr('nan')
    mpfr('nan')
    >>> mpfr('nan') * a
    mpfr('nan')
    >>> G.mpz(0) * mpfr('Inf')
    mpfr('nan')
    >>> G.mpz(0) * mpfr('-Inf')
    mpfr('nan')
    >>> mpfr('Inf') * G.mpz(0)
    mpfr('nan')
    >>> mpfr('-Inf') * G.mpz(0)
    mpfr('nan')
    >>> a / mpfr('Inf')
    mpfr('0.0')
    >>> -a / mpfr('Inf')
    mpfr('-0.0')
    >>> mpfr('Inf') / a
    mpfr('inf')
    >>> mpfr('Inf') / -a
    mpfr('-inf')
    >>> a / mpfr('-Inf')
    mpfr('-0.0')
    >>> -a / mpfr('-Inf')
    mpfr('0.0')
    >>> mpfr('-Inf') / a
    mpfr('-inf')
    >>> mpfr('-Inf') / -a
    mpfr('inf')
    >>> a / mpfr('nan')
    mpfr('nan')
    >>> mpfr('nan') / a
    mpfr('nan')
    >>> mpfr('nan') / G.mpz(0)
    mpfr('nan')
    >>> mpfr('nan') / G.mpz(0)
    mpfr('nan')

    >>> divmod(a, float('Inf'))
    (mpfr('0.0'), mpfr('123.0'))
    >>> divmod(a, float('-Inf'))
    (mpfr('-1.0'), mpfr('-inf'))
    >>> divmod(-a, float('Inf'))
    (mpfr('-1.0'), mpfr('inf'))
    >>> divmod(-a, float('-Inf'))
    (mpfr('0.0'), mpfr('-123.0'))
    >>> divmod(a, float('nan'))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(-a, float('nan'))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(G.mpz(0), float('Inf'))
    (mpfr('0.0'), mpfr('0.0'))
    >>> divmod(G.mpz(0), float('-Inf'))
    (mpfr('-0.0'), mpfr('-0.0'))
    >>> divmod(G.mpz(0), float('nan'))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('Inf'), a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('-Inf'), a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('Inf'), -a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('-Inf'), -a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('nan'), a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('nan'), -a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('Inf'), G.mpz(0))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('-Inf'), G.mpz(0))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(float('nan'), G.mpz(0))
    (mpfr('nan'), mpfr('nan'))

    >>> divmod(a, mpfr('Inf'))
    (mpfr('0.0'), mpfr('123.0'))
    >>> divmod(a, mpfr('-Inf'))
    (mpfr('-1.0'), mpfr('-inf'))
    >>> divmod(-a, mpfr('Inf'))
    (mpfr('-1.0'), mpfr('inf'))
    >>> divmod(-a, mpfr('-Inf'))
    (mpfr('0.0'), mpfr('-123.0'))
    >>> divmod(a, mpfr('nan'))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(-a, mpfr('nan'))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(G.mpz(0), mpfr('Inf'))
    (mpfr('0.0'), mpfr('0.0'))
    >>> divmod(G.mpz(0), mpfr('-Inf'))
    (mpfr('-0.0'), mpfr('-0.0'))
    >>> divmod(G.mpz(0), mpfr('nan'))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('Inf'), a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('-Inf'), a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('Inf'), -a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('-Inf'), -a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('nan'), a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('nan'), -a)
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('Inf'), G.mpz(0))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('-Inf'), G.mpz(0))
    (mpfr('nan'), mpfr('nan'))
    >>> divmod(mpfr('nan'), G.mpz(0))
    (mpfr('nan'), mpfr('nan'))

Test gmpy2.divexact
-------------------

    >>> aa=G.mpz('1234567912345678912345679')
    >>> bb=G.mpz('789789789789789789789789')
    >>> cc=aa*bb
    >>> G.divexact(cc,aa)
    mpz(789789789789789789789789)
    >>> del aa,bb,cc

Test different flavors of divmod
--------------------------------

    >>> G.c_divmod(17,5)
    (mpz(4), mpz(-3))
    >>> G.c_divmod(-17,5)
    (mpz(-3), mpz(-2))
    >>> G.c_divmod(17,-5)
    (mpz(-3), mpz(2))
    >>> G.c_divmod(-17,-5)
    (mpz(4), mpz(3))
    >>> G.f_divmod(17,5)
    (mpz(3), mpz(2))
    >>> G.f_divmod(-17,5)
    (mpz(-4), mpz(3))
    >>> G.f_divmod(17,-5)
    (mpz(-4), mpz(-3))
    >>> G.f_divmod(-17,-5)
    (mpz(3), mpz(-2))
    >>> G.t_divmod(17,5)
    (mpz(3), mpz(2))
    >>> G.t_divmod(-17,5)
    (mpz(-3), mpz(-2))
    >>> G.t_divmod(17,-5)
    (mpz(-3), mpz(2))
    >>> G.t_divmod(-17,-5)
    (mpz(3), mpz(-2))

Test comparisons
----------------

    >>> c=G.mpz(a)
    >>> a
    mpz(123)
    >>> b
    mpz(456)
    >>> c is a
    True
    >>> c==a
    True
    >>> c>a
    False
    >>> c<a
    False
    >>> a>b
    False
    >>> a<b
    True
    >>> not G.mpz(0)
    True
    >>> not a
    False
    >>> G.mpz(1) == None
    False
    >>> G.mpz(1) == '1'
    False
    >>> G.mpz(1) == 'abc'
    False
    >>> [G.mpz(23), None].count(None)
    1

Test mpz construction
---------------------

    >>> G.mpz(3.14)
    mpz(3)
    >>> G.mpz(G.mpq(17,3))
    mpz(5)
    >>> G.mpz(23)
    mpz(23)
    >>> G.mpz(-23)
    mpz(-23)
    >>> x=1000*1000*1000*1000*1000*1000*1000
    >>> G.mpz(x)
    mpz(1000000000000000000000)

Test bit operations
-------------------

    >>> ~a
    mpz(-124)
    >>> a&b
    mpz(72)
    >>> a|b
    mpz(507)
    >>> a^b
    mpz(435)
    >>> a<<1
    mpz(246)
    >>> a>>1
    mpz(61)
    >>> a<<-1
    Traceback (innermost last):
      ...
    ValueError: negative shift count
    >>> a>>-2
    Traceback (innermost last):
      ...
    ValueError: negative shift count
    >>> a<<0
    mpz(123)
    >>> a>>0
    mpz(123)
    >>> G.popcount(a)
    6
    >>> G.popcount(b)
    4
    >>> G.popcount(-7)
    -1
    >>> G.popcount(0)
    0
    >>> G.hamdist(a,b)
    6
    >>> G.hamdist(3)
    Traceback (innermost last):
      ...
    TypeError: hamdist() requires 'mpz','mpz' arguments
    >>> G.hamdist(a)
    Traceback (innermost last):
      ...
    TypeError: hamdist() requires 'mpz','mpz' arguments
    >>> G.hamdist(a, 3, 4)
    Traceback (innermost last):
      ...
    TypeError: hamdist() requires 'mpz','mpz' arguments
    >>> a.bit_set(20)
    mpz(1048699)
    >>> a.bit_clear(0)
    mpz(122)
    >>> for i in range(8):
    ...     print(a.bit_test(i))
    ...
    True
    True
    False
    True
    True
    True
    True
    False
    >>> for i in range(10):
    ...     print(b.bit_test(i))
    ...
    False
    False
    False
    True
    False
    False
    True
    True
    True
    False
    >>> [a.bit_scan0(j) for j in range(33)]
    [2, 2, 2, 7, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
    >>> [a.bit_scan1(j) for j in range(10)]
    [0, 1, 3, 3, 4, 5, 6, None, None, None]
    >>> n=G.mpz(-(7+6*16+5*256+7*4092))
    >>> [n.bit_scan0(j) for j in range(18)]
    [1, 1, 3, 3, 6, 6, 6, 8, 8, 10, 10, 12, 12, 13, 14, -1, None, None]
    >>> [n.bit_scan1(j) for j in range(33)]
    [0, 2, 2, 4, 4, 5, 7, 7, 9, 9, 11, 11, 15, 15, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
    >>> G.mpz(0).bit_length()
    0
    >>> G.mpz(12345).bit_length()
    14
    >>> G.bit_mask(9)
    mpz(511)
    >>> G.f_mod_2exp(a,5)
    mpz(27)
    >>> G.f_mod_2exp(b,5)
    mpz(8)
    >>> G.f_mod_2exp(b,5)==(b%32)
    1
    >>> G.f_mod_2exp(a,5)==(a%32)
    1

Test format
-----------

    >>> str(a)
    '123'
    >>> repr(a)
    'mpz(123)'
    >>> hex(a)
    '0x7b'
    >>> oct(a)
    '0o173'
    >>> G.mpz('123')
    mpz(123)
    >>> G.mpz('1001001011',2)
    mpz(587)
    >>> G.mpz('1001001011',2).digits(2)
    '0b1001001011'
    >>> for i in range(2,63):
    ...     print(a.digits(i))
    ...
    0b1111011
    11120
    1323
    443
    323
    234
    0o173
    146
    123
    102
    a3
    96
    8b
    83
    0x7b
    74
    6f
    69
    63
    5i
    5d
    58
    53
    4n
    4j
    4f
    4b
    47
    43
    3u
    3r
    3o
    3l
    3i
    3f
    3C
    39
    36
    33
    30
    2d
    2b
    2Z
    2X
    2V
    2T
    2R
    2P
    2N
    2L
    2J
    2H
    2F
    2D
    2B
    29
    27
    25
    23
    21
    1z
    >>> print(a.digits(63))
    Traceback (innermost last):
      ...
    ValueError: base must be either 0 or in the interval 2 ... 62
    >>> G.mpz('43')
    mpz(43)
    >>> G.mpz('043')
    mpz(43)
    >>> G.mpz('43',0)
    mpz(43)
    >>> G.mpz('0o43')
    mpz(35)
    >>> G.mpz('0x43')
    mpz(67)
    >>> G.mpz('0x43',10)
    Traceback (innermost last):
      ...
    ValueError: invalid digits

Test binary i/o
---------------

    >>> ba=a.binary()
    >>> ba
    b'{'
    >>> G.mpz_from_old_binary(ba)
    mpz(123)
    >>> G.mpz_from_old_binary(ba)==a
    1
    >>> G.binary(G.mpz(123))
    b'{'
    >>> z=G.mpz_from_old_binary(b'melancholy')
    >>> z
    mpz(573406620562849222387053)
    >>> int(z)
    573406620562849222387053
    >>> divmod(z,a)
    (mpz(4661842443600400182008), mpz(69))
    >>> for i in range(2,37):
    ...    print(i,z.numdigits(i))
    ...
    2 79
    3 50
    4 40
    5 35
    6 31
    7 29
    8 27
    9 25
    10 24
    11 23
    12 23
    13 22
    14 21
    15 21
    16 20
    17 20
    18 19
    19 19
    20 19
    21 18
    22 18
    23 18
    24 18
    25 18
    26 17
    27 17
    28 17
    29 17
    30 17
    31 16
    32 16
    33 16
    34 16
    35 16
    36 16
    >>> G.numdigits(23)
    2
    >>> G.numdigits(23,2)
    5
    >>> G.numdigits(23,99)
    Traceback (most recent call last):
      ...
    ValueError: base must be either 0 or in the interval 2 ... 62
    >>> G.mpz_from_old_binary(G.binary(G.mpz(-123)))
    mpz(-123)
    >>> int(G.mpz(-3))
    -3

Test various functions
----------------------

This section needs to be moved to another file and expanded.


    >>> G.iroot_rem(a,2)
    (mpz(11), mpz(2))
    >>> G.iroot_rem(a,3)
    (mpz(4), mpz(59))
    >>> G.iroot_rem(a*a)
    Traceback (most recent call last):
      ...
    TypeError: iroot_rem() requires 'mpz','int' arguments
    >>> G.iroot_rem(a*a,2)
    (mpz(123), mpz(0))
    >>> print(G.isqrt(a))
    11
    >>> print(G.isqrt(b))
    21
    >>> print(G.isqrt_rem(a))
    (mpz(11), mpz(2))
    >>> print(G.isqrt_rem(b))
    (mpz(21), mpz(15))
    >>> for i in range(5):
    ...    print(G.iroot(a,i+1),G.iroot(b,i+1))
    ...
    (mpz(123), True) (mpz(456), True)
    (mpz(11), False) (mpz(21), False)
    (mpz(4), False) (mpz(7), False)
    (mpz(3), False) (mpz(4), False)
    (mpz(2), False) (mpz(3), False)
    >>> a.is_square()
    0
    >>> a.is_power()
    0
    >>> G.is_square(99*99)
    1
    >>> G.is_square(99*99*99)
    0
    >>> G.is_square(0)
    1
    >>> G.is_square(-1)
    0
    >>> G.is_power(99*99*99)
    1
    >>> G.gcd(a,b)
    mpz(3)
    >>> temp=G.gcdext(a,b)
    >>> temp[0]==a*temp[1]+b*temp[2]
    True
    >>> G.lcm(a,b)
    mpz(18696)
    >>> G.fac(7)
    mpz(5040)
    >>> G.fib(17)
    mpz(1597)
    >>> for i in range(10):
    ...     print(G.bincoef(10,i))
    ...
    1
    10
    45
    120
    210
    252
    210
    120
    45
    10
    >>> G.divm(b,a,20)
    mpz(12)
    >>> G.divm(a,b,100)
    Traceback (innermost last):
      ...
    ZeroDivisionError: not invertible
    >>> G.divm(6,12,14)
    mpz(4)
    >>> G.divm(0,1,2)
    mpz(0)
    >>> G.divm(4,8,20)
    mpz(3)
    >>> G.divm(4,8,20)
    mpz(3)
    >>> G.mpz(20)
    mpz(20)
    >>> G.mpz(8)
    mpz(8)
    >>> G.mpz(4)
    mpz(4)
    >>> G.invert(a,100)
    mpz(87)
    >>> G.invert(b,100)
    mpz(0)
    >>> G.invert(3)
    Traceback (innermost last):
      ...
    TypeError: invert() requires 'mpz','mpz' arguments
    >>> G.invert()
    Traceback (innermost last):
      ...
    TypeError: invert() requires 'mpz','mpz' arguments
    >>> G.comb(3,-1)
    Traceback (most recent call last):
      ...
    ValueError: binomial coefficient with negative k
    >>> G.isqrt(-1)
    Traceback (most recent call last):
      ...
    ValueError: isqrt() of negative number
    >>> G.isqrt_rem(-1)
    Traceback (most recent call last):
      ...
    ValueError: isqrt_rem() of negative number
    >>> G.remove(3,-1)
    Traceback (most recent call last):
      ...
    ValueError: factor must be > 1
    >>> G.remove(3)
    Traceback (innermost last):
      ...
    TypeError: remove() requires 'mpz','mpz' arguments
    >>> G.remove()
    Traceback (innermost last):
      ...
    TypeError: remove() requires 'mpz','mpz' arguments
    >>> G.is_prime(3,-3)
    Traceback (most recent call last):
      ...
    ValueError: repetition count for is_prime must be positive
    >>> G.jacobi(10,3)
    1
    >>> G.jacobi(10,-3)
    Traceback (most recent call last):
      ...
    ValueError: jacobi's y must be odd prime > 0
    >>> G.jacobi(3)
    Traceback (innermost last):
      ...
    TypeError: jacobi() requires 'mpz','mpz' arguments
    >>> G.jacobi()
    Traceback (innermost last):
      ...
    TypeError: jacobi() requires 'mpz','mpz' arguments
    >>> G.legendre(10,3)
    1
    >>> G.legendre(10,-3)
    Traceback (most recent call last):
      ...
    ValueError: legendre's y must be odd and > 0
    >>> G.legendre(3)
    Traceback (innermost last):
      ...
    TypeError: legendre() requires 'mpz','mpz' arguments
    >>> G.legendre()
    Traceback (innermost last):
      ...
    TypeError: legendre() requires 'mpz','mpz' arguments
    >>> G.kronecker(10,3)
    1
    >>> G.kronecker(10,-3)
    1
    >>> G.kronecker(3)
    Traceback (innermost last):
      ...
    TypeError: kronecker() requires 'mpz','mpz' arguments
    >>> G.kronecker()
    Traceback (innermost last):
      ...
    TypeError: kronecker() requires 'mpz','mpz' arguments
    >>> a=10**20
    >>> b=a+39
    >>> G.jacobi(a,b)
    1
    >>> G.legendre(a,b)
    1
    >>> G.kronecker(a,b)
    Traceback (most recent call last):
      ...
    ValueError: Either arg in Kronecker must fit in an int

