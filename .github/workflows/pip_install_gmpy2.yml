name: pip_install_gmpy2

on: [push, pull_request]

jobs:
  osx:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11, 3.12, 3.13]
        os: [macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - run: brew install autoconf automake libtool
      - name: Cache .local builds
        id: cache-gmpy2
        uses: actions/cache@v4
        with:
          path: .local
          key: ${{ matrix.os }}-${{ hashFiles('scripts/*') }}
      - run: bash scripts/cibw_before_all.sh
        if: steps.cache-gmpy2.outputs.cache-hit != 'true'
      - run: pip install --upgrade pip
      - run: pip --verbose install .[tests] -Csetup-args=-Dbuildtype=debug
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/.local/lib/pkgconfig
      - run: pytest test/
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/.local/lib
#     - run: python test_cython/runtests.py
#       if: ${{ matrix.python-version != '3.13' }}

  linux:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10', 3.11, pypy3.11, 3.12, 3.13, 3.13t,
                         3.14, 3.14t]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_ADDOPTS: --verbose
      CFLAGS: -Wall -Wpedantic -Werror -std=c17
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install Libs
        run: |
          sudo apt-get update
          sudo apt-get install texlive texlive-latex-extra latexmk lcov
      - name: Cache .local builds
        id: cache-gmpy2
        uses: actions/cache@v4
        with:
          path: .local
          key: ${{ matrix.os }}-${{ hashFiles('scripts/*') }}
      - run: bash scripts/cibw_before_all.sh
        if: steps.cache-gmpy2.outputs.cache-hit != 'true'
      - run: pip install --upgrade pip
      - name: Install dependencies
        run: |
          pip --verbose install .[tests] -Csetup-args=-Dbuildtype=debug
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/.local/lib/pkgconfig
        if: matrix.python-version != 3.11
      - name: Install dependencies
        run: |
          pip --verbose install .[tests,docs] -Cbuild-dir=build -Csetup-args=-Dbuildtype=debug -Csetup-args=-Db_coverage=true
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/.local/lib/pkgconfig
        if: matrix.python-version == 3.11
      - name: Tests
        run: |
          pytest test/
#         python test_cython/runtests.py
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/.local/lib
        if: matrix.python-version != 3.11
      - name: Building docs
        if: matrix.python-version == 3.11
        run: |
          sphinx-build --color -W --keep-going -b doctest docs build/sphinx/doctest
          sphinx-build --color -W --keep-going -b html docs build/sphinx/html
          sphinx-build --color -W --keep-going -b latex docs build/sphinx/latex
          make -C build/sphinx/latex all-pdf
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/.local/lib
      - name: Capture coverage data
        if: matrix.python-version == 3.11
        run: |
          lcov --capture --directory build/ --output-file coverage.info
          lcov --remove coverage.info "*.h" --ignore-errors unused \
               --output-file coverage.info
          genhtml coverage.info --output-directory build/coverage
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.python-version == 3.11
        with:
          path: |
            build/sphinx/doctest/
            build/sphinx/html/
            build/sphinx/latex/gmpy2.pdf
            build/coverage/

  windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v5
      - uses: msys2/setup-msys2@v2.27.0
        name: Setup msys2
        with:
          install: >-
            git
            python-pip
            mingw-w64-ucrt-x86_64-gcc
            autotools
            patch
          msystem: ucrt64
      - name: Build and run tests in venv
        run: |
          bash scripts/cibw_before_all.sh
          python -m venv .test-venv
          source .test-venv/bin/activate
          pip install --upgrade pip
          export PKG_CONFIG_PATH="$(pwd)/.local/lib/pkgconfig"
          pip --verbose install .[tests] -Csetup-args=-Dbuildtype=debug
          export PATH="$PATH:$(pwd)/.local/bin"
          pytest test/
#         python test_cython/runtests.py
